import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Delete,
  ParseIntPipe,
  Put,
  UseGuards,
} from '@nestjs/common';
import { ProductsService } from './products.service';
import { Product } from './products.entity';
import { ProductInput } from './dto/product.input';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  // âœ… GET /products â†’ seznam vÅ¡ech produktÅ¯
  @Get()
  findAll(): Promise<Product[]> {
    return this.productsService.findAll();
  }

  // âœ… GET /products/:id â†’ detail produktu
  @Get(':id')
  findOne(@Param('id', ParseIntPipe) id: number): Promise<Product> {
    return this.productsService.findOne(id);
  }

  // âœ… POST /products â†’ vytvoÅ™enÃ­ novÃ©ho produktu
  @Post()
  @UseGuards(JwtAuthGuard) // ðŸ”‘ REST â†’ JWT guard
  create(@Body() productData: ProductInput): Promise<Product> {
    return this.productsService.create(productData);
  }

  // âœ… PUT /products/:id â†’ update produktu
  @Put(':id')
  @UseGuards(JwtAuthGuard)
  update(
    @Param('id', ParseIntPipe) id: number,
    @Body() updateData: Partial<ProductInput>,
  ): Promise<Product> {
    return this.productsService.update(id, updateData);
  }

  // âœ… DELETE /products/:id â†’ soft delete (vracÃ­ pÅ™Ã­mo produkt)
  @Delete(':id')
  @UseGuards(JwtAuthGuard)
  async delete(@Param('id', ParseIntPipe) id: number): Promise<Product> {
    return this.productsService.delete(id);
  }
}

